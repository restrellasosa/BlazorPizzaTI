@page "/myorders/{orderId:int}"
@using System.Threading
@inject HttpClient HttpClient

<div class="main">
    @if (InvalidOrder)
    {
        <h2>¡No!</h2>
        <p>Lo sentimos, esta orden no puede ser cargada. </p>
    }
    else if (OrderWithStatus == null)
    {
        <text>Cargando...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Pedido realizado
                    @OrderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Estatus: <strong>@OrderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                Mostrar más detalle...
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int OrderId { get; set; }
    OrderWithStatus OrderWithStatus;
    bool InvalidOrder;
    CancellationTokenSource PollingCancellationToken;

    protected override void OnParametersSet()
    {
        // Si ya estamos haciendo un polling de otra orden, detenerlo.
        PollingCancellationToken?.Cancel();

        // Iniciar un nuevo ciclo de sondeo o polling.
        PollForUpdates();
    }

    private async void PollForUpdates()
    {
        PollingCancellationToken = new CancellationTokenSource();
        while (!PollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                InvalidOrder = false;
                OrderWithStatus =
                    await HttpClient.GetFromJsonAsync<OrderWithStatus>(
                        $"orders/{OrderId}");
            }
            catch (Exception ex)
            {
                // En nuestro caso, el polling se detendrá cuando
                // haya una excepción. Más adelante agregaremos
                // otra condición para detenerse.
                InvalidOrder = true;
                PollingCancellationToken.Cancel();
                Console.Error.WriteLine(ex);
            }
            // polling.
            StateHasChanged();

            // Cada 4 segundos solicitará nuevos datos al servidor.
            await Task.Delay(4000);

        }

    }

}

