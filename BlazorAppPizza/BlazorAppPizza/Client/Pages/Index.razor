@page "/"
@inject HttpClient HttpClient

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(()=>ShowConfigurePizzaDialog(Special))"
                    style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="ConfiguringPizza"
                          OnConfirm="ConfirmConfigurePizzaDialog"
                          OnCancel="CancelConfigurePizzaDialog" />
}

@code{
    List<BlazorAppPizza.Shared.PizzaSpecial> Specials;
    Pizza ConfiguringPizza;
    bool ShowingConfigureDialog;
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetFromJsonAsync<List<BlazorAppPizza.Shared.PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        ConfiguringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        ShowingConfigureDialog = true;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(ConfiguringPizza);
        ConfiguringPizza = null;

        ShowingConfigureDialog = false;
    }

    void CancelConfigurePizzaDialog()
    {
        ConfiguringPizza = null;
        ShowingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await HttpClient.PostAsJsonAsync("orders", order);
        order = new Order();
    }
}



